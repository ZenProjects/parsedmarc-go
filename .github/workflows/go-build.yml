name: Go Build and Test

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:

env:
  GO_VERSION: '1.23'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run go vet
        run: make vet

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.23']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Download dependencies
        run: go mod download

      - name: Run CI tests
        run: make test-ci

      - name: Generate test coverage
        run: make test-coverage

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: [lint, test]
    strategy:
      matrix:
        goos: [linux, windows]
        goarch: [amd64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Build binary for ${{ matrix.goos }}/${{ matrix.goarch }}
        run: |
          mkdir -p build
          BINARY_NAME="parsedmarc-go-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build \
            -ldflags="-w -s -X main.version=${GITHUB_REF_NAME:-dev}" \
            -o build/${BINARY_NAME} \
            ./cmd/parsedmarc-go
        env:
          CGO_ENABLED: 0

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: parsedmarc-go-${{ matrix.goos }}-${{ matrix.goarch }}
          path: build/
          retention-days: 7


  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Gosec Security Scanner
        run: |
          # Install gosec
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          
          # Run gosec scan (continue on error to ensure SARIF file is created)
          gosec -fmt sarif -out gosec.sarif ./... || echo "Gosec completed with findings"
          
          # Ensure SARIF file exists
          if [ ! -f "gosec.sarif" ]; then
            echo "Creating empty SARIF file"
            cat > gosec.sarif << 'EOF'
          {
            "version": "2.1.0",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "gosec",
                    "version": "2.0.0"
                  }
                },
                "results": []
              }
            ]
          }
          EOF
          fi

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: gosec.sarif

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true
        with:
          sarif_file: 'trivy-results.sarif'

  release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [build, security-scan]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Create compressed archives for each platform
          cd artifacts
          
          # Linux binary
          if [ -d "parsedmarc-go-linux-amd64" ]; then
            cd parsedmarc-go-linux-amd64
            tar -czf ../../release-assets/parsedmarc-go-linux-amd64.tar.gz *
            cd ..
          fi
          
          # Windows binary
          if [ -d "parsedmarc-go-windows-amd64" ]; then
            cd parsedmarc-go-windows-amd64
            zip -r ../../release-assets/parsedmarc-go-windows-amd64.zip *
            cd ..
          fi
          
          cd ..
          ls -la release-assets/

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release_notes
        run: |
          cat << EOF > release_notes.md
          ## üöÄ parsedmarc-go ${{ steps.version.outputs.version }}
          
          ### üì¶ Downloads
          
          | Platform | Architecture | Download |
          |----------|-------------|----------|
          | Linux    | x86_64      | [parsedmarc-go-linux-amd64.tar.gz](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/parsedmarc-go-linux-amd64.tar.gz) |
          | Windows  | x86_64      | [parsedmarc-go-windows-amd64.zip](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/parsedmarc-go-windows-amd64.zip) |
          
          ### üîß Quick Installation
          
          **Linux:**
          \`\`\`bash
          curl -L -o parsedmarc-go.tar.gz https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/parsedmarc-go-linux-amd64.tar.gz
          tar -xzf parsedmarc-go.tar.gz
          chmod +x parsedmarc-go-linux-amd64
          sudo mv parsedmarc-go-linux-amd64 /usr/local/bin/parsedmarc-go
          \`\`\`
          
          **Windows:**
          \`\`\`powershell
          Invoke-WebRequest -Uri "https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/parsedmarc-go-windows-amd64.zip" -OutFile "parsedmarc-go.zip"
          Expand-Archive -Path "parsedmarc-go.zip" -DestinationPath "."
          \`\`\`
          
          ### ‚ú® What's New
          
          See the [CHANGELOG](https://github.com/${{ github.repository }}/blob/${{ steps.version.outputs.version }}/CHANGELOG.md) for detailed changes.
          
          ### üìö Documentation
          
          - üìñ [Complete Documentation](https://github.com/${{ github.repository }}tree/${{ steps.version.outputs.version }}/docs)
          - ‚ö° [Quick Start Guide](https://github.com/${{ github.repository }}tree/${{ steps.version.outputs.version }}/docs/installation.md)
          - ‚öôÔ∏è [Configuration Guide](https://github.com/${{ github.repository }}tree/${{ steps.version.outputs.version }}/docs/configuration.md)
          - üí° [Usage Examples](https://github.com/${{ github.repository }}tree/${{ steps.version.outputs.version }}/docs/usage.md)
          
          ---
          
          ü§ñ **Generated automatically** by [GitHub Actions](https://github.com/${{ github.repository }}/actions)
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.version.outputs.version }}...HEAD
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: "parsedmarc-go ${{ steps.version.outputs.version }}"
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          files: |
            release-assets/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}