name: Container Image Build and Push

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:

env:
  GHCR_REGISTRY: ghcr.io
  GCR_REGISTRY: gcr.io
  GCR_PROJECT_ID: ${{ secrets.GCR_PROJECT_ID }}

jobs:
  build-and-push:
    name: Build and Push Container Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set lowercase image name
        run: |
          echo "IMAGE_NAME=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set up Buildah
        run: |
          sudo apt-get update
          sudo apt-get install -y buildah podman
          
      - name: Log in to GitHub Container Registry
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Log in to Google Container Registry
        if: env.GCR_PROJECT_ID != ''
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.GCR_REGISTRY }}
          username: _json_key
          password: ${{ secrets.GCR_SERVICE_ACCOUNT_KEY }}

      - name: Extract metadata for GHCR
        id: meta-ghcr
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest
            
      - name: Extract metadata for GCR
        id: meta-gcr
        if: env.GCR_PROJECT_ID != ''
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GCR_REGISTRY }}/${{ env.GCR_PROJECT_ID }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Build container image with Buildah
        id: build-image
        run: |
          # Extract version from metadata
          if [[ "${{ github.ref }}" =~ ^refs/tags/v ]]; then
            VERSION=$(echo "${{ github.ref }}" | sed 's/refs\/tags\///')
          else
            VERSION="dev-${{ github.sha }}"
          fi
          
          # Build the image
          buildah bud \
            --build-arg VERSION="$VERSION" \
            --label org.opencontainers.image.created="$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
            --label org.opencontainers.image.description="DMARC report parser written in Go" \
            --label org.opencontainers.image.revision="${{ github.sha }}" \
            --label org.opencontainers.image.source="${{ github.server_url }}/${{ github.repository }}" \
            --label org.opencontainers.image.title="parsedmarc-go" \
            --label org.opencontainers.image.url="${{ github.server_url }}/${{ github.repository }}" \
            --label org.opencontainers.image.version="$VERSION" \
            -t temp-image \
            .
          
          # Tag with GHCR tags
          echo "${{ steps.meta-ghcr.outputs.tags }}" | while read -r tag; do
            if [ -n "$tag" ]; then
              buildah tag temp-image "$tag"
              echo "Tagged GHCR: $tag"
            fi
          done
          
          # Tag with GCR tags if enabled
          if [ "${{ env.GCR_PROJECT_ID }}" != "" ]; then
            echo "${{ steps.meta-gcr.outputs.tags }}" | while read -r tag; do
              if [ -n "$tag" ]; then
                buildah tag temp-image "$tag"
                echo "Tagged GCR: $tag"
              fi
            done
          fi
          
          # Set output for later use
          echo "ghcr-tags=${{ steps.meta-ghcr.outputs.tags }}" >> $GITHUB_OUTPUT
          echo "gcr-tags=${{ steps.meta-gcr.outputs.tags }}" >> $GITHUB_OUTPUT
          echo "image-digest=$(buildah inspect --format='{{.FromImageDigest}}' temp-image)" >> $GITHUB_OUTPUT

      - name: Test container image
        run: |
          # Get the first tag for testing
          FIRST_TAG=$(echo "${{ steps.meta-ghcr.outputs.tags }}" | head -n1)
          echo "Testing image: $FIRST_TAG"
          
          # Test that the image runs and shows help
          podman run --rm "$FIRST_TAG" --help || echo "Help command failed (expected for some configurations)"
          
          # Test that the binary exists and is executable
          podman run --rm "$FIRST_TAG" ls -la /app/parsedmarc-go

      - name: Scan container image for vulnerabilities
        run: |
          # Save the image to a tarball that Trivy can scan
          echo "Saving temp-image to tarball for scanning"
          podman save temp-image -o temp-image.tar
          
          # Install trivy
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy
          
          # Run trivy scan on the tarball
          trivy image --input temp-image.tar --format sarif --output trivy-image-results.sarif || echo "Trivy scan completed with findings"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'

      - name: Push container image
        run: |
          # Push GHCR tags
          echo "${{ steps.build-image.outputs.ghcr-tags }}" | while read -r tag; do
            if [ -n "$tag" ]; then
              echo "Pushing to GHCR: $tag"
              buildah push "$tag"
            fi
          done
          
          # Push GCR tags if enabled
          if [ "${{ env.GCR_PROJECT_ID }}" != "" ]; then
            echo "${{ steps.build-image.outputs.gcr-tags }}" | while read -r tag; do
              if [ -n "$tag" ]; then
                echo "Pushing to GCR: $tag"
                buildah push "$tag"
              fi
            done
          fi

      - name: Generate SBOM
        run: |
          # Use the tarball for SBOM generation since it's more reliable
          # Install syft for SBOM generation
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          
          # Generate SBOM from the image tarball
          syft packages temp-image.tar -o spdx-json=sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json
          retention-days: 30

  multi-arch-build:
    name: Multi-Architecture Build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        arch: [amd64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set lowercase image name
        run: |
          echo "IMAGE_NAME=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set up Buildah
        run: |
          sudo apt-get update
          sudo apt-get install -y buildah podman

      - name: Log in to GitHub Container Registry
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Log in to Google Container Registry
        if: env.GCR_PROJECT_ID != ''
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.GCR_REGISTRY }}
          username: _json_key
          password: ${{ secrets.GCR_SERVICE_ACCOUNT_KEY }}

      - name: Extract metadata for GHCR
        id: meta-ghcr
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GHCR_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},suffix=-${{ matrix.arch }}
            type=raw,value=latest,suffix=-${{ matrix.arch }}
            
      - name: Extract metadata for GCR
        id: meta-gcr
        if: env.GCR_PROJECT_ID != ''
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GCR_REGISTRY }}/${{ env.GCR_PROJECT_ID }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},suffix=-${{ matrix.arch }}
            type=raw,value=latest,suffix=-${{ matrix.arch }}

      - name: Build container image for ${{ matrix.arch }}
        run: |
          VERSION="${{ fromJSON(steps.meta-ghcr.outputs.json).labels['org.opencontainers.image.version'] }}"
          if [ -z "$VERSION" ]; then
            VERSION="dev-${{ github.sha }}"
          fi
          
          buildah bud \
            --arch ${{ matrix.arch }} \
            --build-arg VERSION="$VERSION" \
            --label org.opencontainers.image.created="${{ fromJSON(steps.meta-ghcr.outputs.json).labels['org.opencontainers.image.created'] }}" \
            --label org.opencontainers.image.revision="${{ fromJSON(steps.meta-ghcr.outputs.json).labels['org.opencontainers.image.revision'] }}" \
            --label org.opencontainers.image.version="$VERSION" \
            -t temp-image-${{ matrix.arch }} \
            .
          
          # Tag and push GHCR images
          echo "${{ steps.meta-ghcr.outputs.tags }}" | while read -r tag; do
            if [ -n "$tag" ]; then
              buildah tag temp-image-${{ matrix.arch }} "$tag"
              buildah push "$tag"
            fi
          done
          
          # Tag and push GCR images if enabled
          if [ "${{ env.GCR_PROJECT_ID }}" != "" ]; then
            echo "${{ steps.meta-gcr.outputs.tags }}" | while read -r tag; do
              if [ -n "$tag" ]; then
                buildah tag temp-image-${{ matrix.arch }} "$tag"
                buildah push "$tag"
              fi
            done
          fi

  create-manifest:
    name: Create Multi-Arch Manifest
    needs: [multi-arch-build]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Set up Podman
        run: |
          sudo apt-get update
          sudo apt-get install -y podman

      - name: Log in to GitHub Container Registry
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Log in to Google Container Registry
        if: env.GCR_PROJECT_ID != ''
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.GCR_REGISTRY }}
          username: _json_key
          password: ${{ secrets.GCR_SERVICE_ACCOUNT_KEY }}

      - name: Create and push multi-arch manifest
        run: |
          # Determine the base tag
          if [[ "${{ github.ref }}" =~ ^refs/tags/v ]]; then
            TAG=$(echo "${{ github.ref }}" | sed 's/refs\/tags\///')
          elif [[ "${{ github.ref }}" == "refs/heads/master" || "${{ github.ref }}" == "refs/heads/main" ]]; then
            TAG="latest"
          else
            TAG=$(echo "${{ github.ref }}" | sed 's/refs\/heads\///')
          fi
          
          # Create manifests for GHCR
          GHCR_IMAGE_BASE="${{ env.GHCR_REGISTRY }}/$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')"
          
          podman manifest create "${GHCR_IMAGE_BASE}:${TAG}"
          podman manifest add "${GHCR_IMAGE_BASE}:${TAG}" "${GHCR_IMAGE_BASE}:${TAG}-amd64"
          podman manifest push "${GHCR_IMAGE_BASE}:${TAG}" "${GHCR_IMAGE_BASE}:${TAG}"
          echo "GHCR Multi-architecture manifest created and pushed: ${GHCR_IMAGE_BASE}:${TAG}"
          
          # Create manifests for GCR if enabled
          if [ "${{ env.GCR_PROJECT_ID }}" != "" ]; then
            GCR_IMAGE_BASE="${{ env.GCR_REGISTRY }}/${{ env.GCR_PROJECT_ID }}/$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]' | cut -d'/' -f2)"
            
            podman manifest create "${GCR_IMAGE_BASE}:${TAG}"
            podman manifest add "${GCR_IMAGE_BASE}:${TAG}" "${GCR_IMAGE_BASE}:${TAG}-amd64"
            podman manifest push "${GCR_IMAGE_BASE}:${TAG}" "${GCR_IMAGE_BASE}:${TAG}"
            echo "GCR Multi-architecture manifest created and pushed: ${GCR_IMAGE_BASE}:${TAG}"
          fi