name: Container Image Build and Push

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Container Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Buildah
        run: |
          sudo apt-get update
          sudo apt-get install -y buildah podman
          
      - name: Log in to Container Registry
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Build container image with Buildah
        id: build-image
        run: |
          # Extract version from metadata
          VERSION="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}"
          if [ -z "$VERSION" ]; then
            VERSION="dev-${{ github.sha }}"
          fi
          
          # Build the image
          buildah bud \
            --build-arg VERSION="$VERSION" \
            --label org.opencontainers.image.created="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}" \
            --label org.opencontainers.image.description="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.description'] }}" \
            --label org.opencontainers.image.licenses="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.licenses'] }}" \
            --label org.opencontainers.image.revision="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}" \
            --label org.opencontainers.image.source="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.source'] }}" \
            --label org.opencontainers.image.title="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.title'] }}" \
            --label org.opencontainers.image.url="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.url'] }}" \
            --label org.opencontainers.image.version="$VERSION" \
            -t temp-image \
            .
          
          # Tag with all the tags from metadata
          echo "${{ steps.meta.outputs.tags }}" | while read -r tag; do
            if [ -n "$tag" ]; then
              buildah tag temp-image "$tag"
              echo "Tagged: $tag"
            fi
          done
          
          # Set output for later use
          echo "image-tags=${{ steps.meta.outputs.tags }}" >> $GITHUB_OUTPUT
          echo "image-digest=$(buildah inspect --format='{{.FromImageDigest}}' temp-image)" >> $GITHUB_OUTPUT

      - name: Test container image
        run: |
          # Get the first tag for testing
          FIRST_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "Testing image: $FIRST_TAG"
          
          # Test that the image runs and shows help
          podman run --rm "$FIRST_TAG" --help || echo "Help command failed (expected for some configurations)"
          
          # Test that the binary exists and is executable
          podman run --rm "$FIRST_TAG" ls -la /app/parsedmarc-go

      - name: Scan container image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: temp-image
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'

      - name: Push container image
        run: |
          # Push all tags
          echo "${{ steps.meta.outputs.tags }}" | while read -r tag; do
            if [ -n "$tag" ]; then
              echo "Pushing: $tag"
              buildah push "$tag"
            fi
          done

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json
          retention-days: 30

  multi-arch-build:
    name: Multi-Architecture Build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        arch: [amd64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4


      - name: Set up Buildah
        run: |
          sudo apt-get update
          sudo apt-get install -y buildah podman

      - name: Log in to Container Registry
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},suffix=-${{ matrix.arch }}
            type=raw,value=latest,suffix=-${{ matrix.arch }}

      - name: Build container image for ${{ matrix.arch }}
        run: |
          VERSION="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}"
          if [ -z "$VERSION" ]; then
            VERSION="dev-${{ github.sha }}"
          fi
          
          buildah bud \
            --arch ${{ matrix.arch }} \
            --build-arg VERSION="$VERSION" \
            --label org.opencontainers.image.created="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}" \
            --label org.opencontainers.image.revision="${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}" \
            --label org.opencontainers.image.version="$VERSION" \
            -t temp-image-${{ matrix.arch }} \
            .
          
          # Tag with metadata tags
          echo "${{ steps.meta.outputs.tags }}" | while read -r tag; do
            if [ -n "$tag" ]; then
              buildah tag temp-image-${{ matrix.arch }} "$tag"
              buildah push "$tag"
            fi
          done

  create-manifest:
    name: Create Multi-Arch Manifest
    needs: [multi-arch-build]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Set up Podman
        run: |
          sudo apt-get update
          sudo apt-get install -y podman

      - name: Log in to Container Registry
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push multi-arch manifest
        run: |
          # Determine the base tag
          if [[ "${{ github.ref }}" =~ ^refs/tags/v ]]; then
            TAG=$(echo "${{ github.ref }}" | sed 's/refs\/tags\///')
          elif [[ "${{ github.ref }}" == "refs/heads/master" || "${{ github.ref }}" == "refs/heads/main" ]]; then
            TAG="latest"
          else
            TAG=$(echo "${{ github.ref }}" | sed 's/refs\/heads\///')
          fi
          
          IMAGE_BASE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          
          # Create manifest
          podman manifest create "${IMAGE_BASE}:${TAG}"
          
          # Add architecture-specific images to manifest
          podman manifest add "${IMAGE_BASE}:${TAG}" "${IMAGE_BASE}:${TAG}-amd64"
          
          # Push the manifest
          podman manifest push "${IMAGE_BASE}:${TAG}" "${IMAGE_BASE}:${TAG}"
          
          echo "Multi-architecture manifest created and pushed: ${IMAGE_BASE}:${TAG}"